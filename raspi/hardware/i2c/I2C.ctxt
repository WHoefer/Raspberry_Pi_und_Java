#BlueJ class context
comment0.params=dev
comment0.target=I2C(com.pi4j.io.i2c.I2CDevice)
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ I2C\n
comment1.params=reg\ bitpos\ level
comment1.target=int\ setBit(int,\ int,\ int)
comment1.text=\n\ setBit\ setzt\ an\ die\ durch\ bitpos\ bestimmte\ Stelle\ in\ reg\ das\ Bit\ auf\n\ 1\ oder\ 0.\ F\u00FCr\ bitpos\ muss\ zum\ Beispiel\ f\u00FCr\ Bit\ 5\ der\ Wert\ 0b0001_0000\n\ bzw.\ 16\ \u00FCbergeben\ werden.\ Die\ Methode\ greift\ nicht\ auf\ ein\ I2C-Ger\u00E4t\n\ zu.\n\n\ @param\ reg\ Register,\ in\ dem\ das\ Bit\ ge\u00E4ndert\ werden\ soll.\n\ @param\ bitpos\ Bitposition\n\ @param\ level\ Setzt\ Bit\ auf\ 0\ oder\ 1\n\ @return\ Gibt\ das\ ge\u00E4nderte\ Register\ zur\u00FCck\n
comment10.params=reg\ val
comment10.target=int\ write(int,\ byte)
comment10.text=\n\ write\ schreibt\ in\ das\ Register\ reg\ des\ I2C-Ger\u00E4tes\ den\ Wert\ val.\n\ Im\ Fehlerfall\ wird\ -1\ zur\u00FCckgegeben,\ sonst\ 1.\n\n\ @param\ reg\ Register\n\ @param\ val\ Wert\n\ @return\ Schreibstatus\ 1/-1\n
comment11.params=reg\ level\ bitpos
comment11.target=int\ configPin(int,\ int,\ int)
comment11.text=\n\ configPin\ liest\ von\ dem\ I2C-Ger\u00E4t\ das\ Register\ reg\ und\ \u00E4ndert\n\ an\ der\ Stelle\ bitpos\ den\ Bitwert\ auf\ level\ und\ schreibt\ die\n\ Daten\ wieder\ in\ das\ Register\ des\ I2C-Ger\u00E4tes.\n\ Im\ Fehlerfall\ wird\ -1\ zur\u00FCckgegeben,\ sonst\ 1.\n\ F\u00FCr\ bitpos\ muss\ zum\ Beispiel\ f\u00FCr\ Bit\ 5\ der\ Wert\ 0b0001_0000\ bzw\ 16\n\ \u00FCbergeben\ werden.\n\n\ @param\ reg\ Register\n\ @param\ level\ Bitwert\n\ @param\ bitpos\ Bitposition\n\ @return\ Schreibstatus\ 1/-1\n
comment12.params=regRead\ regWrite\ level\ bitpos
comment12.target=int\ configPin(int,\ int,\ int,\ int)
comment12.text=\n\ configPin\ liest\ von\ dem\ I2C-Ger\u00E4t\ das\ Register\ regRead\ und\ \u00E4ndert\n\ an\ der\ Stelle\ bitpos\ den\ Bitwert\ auf\ level\ und\ schreibt\ die\n\ Daten\ in\ das\ Register\ regWrite\ des\ I2C-Ger\u00E4tes.\n\ Im\ Fehlerfall\ wird\ -1\ zur\u00FCckgegeben,\ sonst\ 1.\n\ F\u00FCr\ bitpos\ muss\ zum\ Beispiel\ f\u00FCr\ Bit\ 5\ der\ Wert\ 0b0001_0000\ bzw\ 16\n\ \u00FCbergeben\ werden.\n\n\ @param\ regRead\ Register,\ das\ ausgeslen\ wird\n\ @param\ regWrite\ Register,\ in\ das\ die\ \u00C4nderungen\ geschrieben\ werden\n\ @param\ Bitwert\n\ @param\ bitpos\ Bitposition\n\ @return\ Schreibstatus\ 1/-1\n
comment13.params=regRead\ regWrite\ bitpos
comment13.target=int\ configPinToggle(int,\ int,\ int)
comment13.text=\n\ configPinToggle\ liest\ von\ einem\ I2C-Ger\u00E4t\ aus\ dem\ Register\ regRead,\ \n\ invertiert\ den\ Bitwert\ an\ der\ Stelle\ bitpos\ und\ schreibt\ die\ Daten\ \n\ in\ das\ Regsiter\ regWrite\ des\ I2C-Ger\u00E4tes.\n\ Im\ Fehlerfall\ wird\ -1\ zur\u00FCckgegeben,\ sonst\ 1.\n\ F\u00FCr\ bitpos\ muss\ zum\ Beispiel\ f\u00FCr\ Bit\ 5\ der\ Wert\ 0b0001_0000\ bzw\ 16\n\ \u00FCbergeben\ werden.\n\n\ @param\ regRead\ Register,\ das\ ausgeslen\ wird\n\ @param\ regWrite\ Register,\ in\ das\ die\ \u00C4nderungen\ geschrieben\ werden\n\ @param\ bitpos\ Bitposition\n\ @return\ Schreibstatus\ 1/-1\n
comment2.params=reg\ bitpos
comment2.target=int\ getBit(int,\ int)
comment2.text=\n\ getBit\ holt\ aus\ dem\ Register\ reg\ den\ Bitwert\ an\ der\ Stelle\ bitpos.\n\ F\u00FCr\ bitpos\ muss\ zum\ Beispiel\ f\u00FCr\ Bit\ 5\ der\ Wert\ 0b0001_0000\ bzw\ 16\n\ \u00FCbergeben\ werden.Die\ Methode\ greift\ nicht\ auf\ ein\ I2C-Ger\u00E4t\n\ zu.\n\ \n\ @param\ reg\ Register\n\ @param\ bitpos\ Bitposition\n\ @return\ Bitwert\ 0/1\n
comment3.params=reg\ bitpos
comment3.target=boolean\ isBit(int,\ int)
comment3.text=\n\ isBit\ liefert\ f\u00FCr\ ein\ gesetztes\ Bit\ aus\ dem\ Register\ reg\ den\ Wert\ true\ sonst\ false.\ \n\ Der\ Bitwert\ aus\ dem\ Register\ reg\ wird\ an\ der\ Stelle\ bitpos\ ausgelesen.F\u00FCr\ bitpos\ \n\ muss\ zum\ Beispiel\ f\u00FCr\ Bit\ 5\ der\ Wert\ 0b0001_0000\ bzw\ 16\ \u00FCbergeben\ werden.\ Die\ Methode\ \n\ greift\ nicht\ auf\ ein\ I2C-Ger\u00E4t\n\ zu.\n\n\ @param\ reg\ Register\n\ @param\ bitpos\ Bitposition\n\ @return\ true\ f\u00FCr\ ein\ gesetztes\ Bit\ sonst\ false\n
comment4.params=reg
comment4.target=int\ read(int)
comment4.text=\n\ read\ liest\ das\ Register\ reg\ eines\ I2C-Ger\u00E4tes\ und\ gibt\ den\ Inhalt\ zur\u00FCck.\n\ Die\ Methode\ kann\ bis\ zu\ 3\ Byte\ lange\ Register\ auslesen.\ Ab\ dem\ 4.\n\ Byte\ ist\ der\ R\u00FCckgabewert\ f\u00FCr\ den\ Fehlerfall\ (-1)\ nicht\ mehr\ \n\ eindeutig.\n\ \n\ @param\ reg\ Register\n\ @return\ Im\ Fehlerfall\ wird\ -1\ zur\u00FCckgegeben\n
comment5.params=reg\ array\ size
comment5.target=byte[]\ readArray(int,\ byte[],\ int)
comment5.text=\n\ readArray\ liest\ aus\ dem\ Register\ reg\ \ eines\ I2C-Ger\u00E4tes\ die\ Anzahl\ Bytes,\ \n\ die\ durch\ size\ angegeben\ wird\ und\ speichert\ diese\ in\ das\ Byte-Array\ array.\ \n\ Im\ Fehlerfall\ wird\ das\ erste\ Byte\ im\ Array\ mit\ dem\ Wert\ 0\ belegt.\n\n\ @param\ reg\ Register\n\ @param\ array\ Byte-Array\n\ @param\ size\ Anzahl\ Byte,\ die\ gelesen\ werden\ sollen\n\ @return\ Byte-Array\n
comment6.params=reg\ array\ size
comment6.target=int\ writeArray(int,\ byte[],\ int)
comment6.text=\n\ writeArray\ schreibt\ den\ Inhalt\ aus\ dem\ Byte-Array\ array\ in\ das\ Register\n\ reg\ eines\ I2C-Ger\u00E4tes.\ Die\ Anzahl\ der\ zu\ schreibenden\ Bytes\ steht\ in\ size.\ \n\ Im\ Fehlerfall\ wird\ -1\ zur\u00FCckgegeben,\ sonst\ 1.\n\n\ @param\ reg\ Register\n\ @param\ array\ Byte-Array,\ das\ in\ das\ Regsietr\ geschrieben\ wird.\n\ @param\ size\ Anzahl\ zu\ schriebender\ Bytes.\n\ @return\ Schreibstatus\ 1/-1\n
comment7.params=reg\ bitpos
comment7.target=int\ readPin(int,\ int)
comment7.text=\n\ readPin\ liest\ das\ Register\ reg\ des\ I2C-Ger\u00E4tes\ und\ gibt\ das\ Bit\ bitpos\ zur\u00FCck.\n\ F\u00FCr\ bitpos\ muss\ zum\ Beispiel\ f\u00FCr\ Bit\ 5\ der\ Wert\ 0b0001_0000\ bzw\ 16\n\ \u00FCbergeben\ werden.\ Im\ Fehlerfall\ wird\ -1\ zur\u00FCckgegeben.\n\ Die\ Methode\ kann\ bis\ zu\ 3\ Byte\ lange\ Register\ auslesen.\ Ab\ dem\ 4.\n\ Byte\ ist\ der\ R\u00FCckgabewert\ f\u00FCr\ den\ Fehlerfall\ (-1)\ nicht\ mehr\ \n\ eindeutig.\n\ \n\ @param\ reg\ Register\n\ @param\ bitpos\ Bitposition\n\ @return\ Bitwert\ an\ der\ vorgegebenen\ Bitposition\n
comment8.params=reg\ bitpos
comment8.target=boolean\ isHigh(int,\ int)
comment8.text=\n\ isHigh\ liest\ das\ Register\ reg\ des\ I2C-Ger\u00E4tes\ und\ pr\u00FCft\ das\ Bit\ an\ der\ Stelle\n\ bitpos.\ Gibt\ true\ zur\u00FCck,\ wenn\ das\ Bit\ gesetzt\ ist,\ sonst\ false.\n\ F\u00FCr\ bitpos\ muss\ zum\ Beispiel\ f\u00FCr\ Bit\ 5\ der\ Wert\ 0b0001_0000\ bzw\ 16\n\ \u00FCbergeben\ werden.\n\n\ @param\ reg\ Register\n\ @param\ bitpos\ Bitposition\n\ @return\ true\ f\u00FCr\ gesetzt,\ sonst\ false\n
comment9.params=reg\ bitpos
comment9.target=boolean\ isLow(int,\ int)
comment9.text=\n\ isLow\ liest\ das\ Register\ reg\ des\ I2C-Ger\u00E4tes\ und\ pr\u00FCft\ das\ Bit\ an\ der\ Stelle\n\ bitpos.\ Gibt\ true\ zur\u00FCck,\ wenn\ das\ Bit\ nicht\ gesetzt\ ist,\ sonst\ false.\n\ F\u00FCr\ bitpos\ muss\ zum\ Beispiel\ f\u00FCr\ Bit\ 5\ der\ Wert\ 0b0001_0000\ bzw\ 16\n\ \u00FCbergeben\ werden.\n\n\ @param\ reg\ Register\n\ @param\ bitpos\ Bitposition\n\ @return\ true\ f\u00FCr\ nicht\ gesetzt,\ sonst\ false\n
numComments=14
