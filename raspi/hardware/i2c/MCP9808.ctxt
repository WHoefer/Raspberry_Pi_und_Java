#BlueJ class context
comment0.params=dev
comment0.target=MCP9808(com.pi4j.io.i2c.I2CDevice)
comment1.params=reg
comment1.target=double\ convertTemp(byte[])
comment1.text=\n\ Konvertiert\ eine\ Temperaturangabe\ aus\ einem\ 2\ Byte\ langen\ Array\ in\ einen\ double\ Wert.\ \n\ Das\ Format\ im\ Array\ muss\ MCP9808-Kompatibel\ sein.<br>\n\ 16\ 15\ 14\ 13\ \ 12\ \ 11\ \ 10\ \ 09\ \ 08\ \ 07\ \ 06\ \ 05\ \ 04\ \ \ 03\ \ \ 02\ \ \ 01<br>\n\ -\ \ -\ \ -\ \ SGN\ 2^7\ 2^6\ 2^5\ 2^4\ 2^3\ 2^2\ 2^1\ 2^0\ 2^-1\ 2^-2\ 2^-3\ 2^-4<br>\n\ byte[0]......\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ byte[1].......<br>\n\ \n\ @param\ reg\ Temperaturangabe\ im\ MCO9808-Format\n\ @return\ Temperatur\ als\ double-Wert\n
comment10.params=
comment10.target=double\ getLowerTemp()
comment10.text=\n\ getLowerTemp\ erfragt\ den\ Vorgabewert\ die\ untere\ Temperaturgrenze\ ab.\n\n\ @return\ Temperatur\ in\ \u00B0C\n
comment11.params=dTemp
comment11.target=int\ setLowerTemp(double)
comment11.text=\n\ setLowerTemp\ setzt\ den\ Vorgabewert\ f\u00FCr\ die\ untere\ Temperaturgrenze.\n\ Gibt\ 1\ zur\u00FCck,\ wenn\ erfolgreich\ geschrieben\ werden\ konnte.\ Im\ Fehlerfall\n\ wird\ -1\ zur\u00FCckgegeben.\n\n\ @param\ dTemp\ Temperatur\ in\ \u00B0C\n\ @return\ Schreibstatus\ 1/-1\n
comment12.params=
comment12.target=boolean\ isAmbientLessLowerBoundary()
comment12.text=\n\ isAmbientLessLowerBoundary\ erfragt,\ ob\ die\ Umgebungstemperatur\n\ kleiner\ als\ die\ untere\ Temperaturgrenze\ ist.\n\n\ @return\ boolean\n
comment13.params=activeHigh\ alertOnlyCrit
comment13.target=int\ configComparatorMode(boolean,\ boolean)
comment13.text=\n\ configComparatorMode\ aktiviert\ den\ Alert-Ausgang\ im\ Komparator-Modus.\n\ Mit\ activeHigh\ \=\ true/false\ wird\ der\ Alert-Ausgang\ High-/Low-Aktiv\ gesetzt.\n\ Mit\ alertOnlyCrit\ \=\ true\ reagiert\ der\ Alert-Ausgang\ nur\ auf\ das\ \u00DCberschreiten\n\ der\ kritischen\ Temperatur.\n\ Gibt\ 1\ zur\u00FCck,\ wenn\ erfolgreich\ geschrieben\ werden\ konnte.\ Im\ Fehlerfall\n\ wird\ -1\ zur\u00FCckgegeben.\n\n\ @param\ activeHigh\ Alert-Ausgang\ Activ-High/Activ-Low\ \n\ @param\ alertOnlyCrit\ Alert\ nur\ bei\ \u00DCberschreitung\ der\ kritischen\ Temperatur\n\ @return\ Schreibstatus\n
comment14.params=
comment14.target=int\ alertOutputDisable()
comment14.text=\n\ alertOutputDisable\ deaktiviert\ den\ Alert-Ausgang\n\ Gibt\ 1\ zur\u00FCck,\ wenn\ erfolgreich\ geschrieben\ werden\ konnte.\ Im\ Fehlerfall\n\ wird\ -1\ zur\u00FCckgegeben.\n\n\ @return\ Schreibstatus\n
comment15.params=
comment15.target=boolean\ isAlertOutputStatus()
comment15.text=\n\ isAlertOutputStatus\ erfragt\ ob\ der\ Alertstatus\ auf\ true\ gesetzt\ wurde.\n\n\ @return\ Status\n
comment16.params=hyst
comment16.target=int\ setHysteresis(int)
comment16.text=\n\ setHysteresis\ setzt\ die\ Hysterese\ f\u00FCr\ alle\ Alarmtemperaturen.\ Die\ folgenden\n\ Konstanten\ k\u00F6nnen\ verwendet\ werden\:<br>\n\ MCP9808.HYST00\ \=\ 0\u00B0C<br>\n\ MCP9808.HYST15\ \=\ 1,5\u00B0C<br>\n\ MCP9808.HYST30\ \=\ 3,0\u00B0C<br>\n\ MCP9808.HYST60\ \=\ 6,0\u00B0C<br>\n\ Gibt\ 1\ zur\u00FCck,\ wenn\ erfolgreich\ geschrieben\ werden\ konnte.\ Im\ Fehlerfall\n\ wird\ -1\ zur\u00FCckgegeben.\n\n\ @param\ hyst\ Wert\ f\u00FCr\ Hysterese\n\ @return\ Schreibstatus\ 1/-1\n
comment17.params=res
comment17.target=int\ setResultion(int)
comment17.text=\n\ setResultion\ legt\ die\ Aufl\u00F6sung\ der\ gemessenen\ Umgebungstemperatur\ fest.\n\ Mit\ den\ folgenden\ Konstanten\ werden\ die\ Verschiedenen\ Aufl\u00F6sungen\ eingestellt.<br>\n\ MCP9808.RES05\ \ \ \ \ ->\ 0,5\u00B0C<br>\n\ MCP9808.RES025\ \ \ \ ->\ 0,25\u00B0C<br>\n\ MCP9808.RES01255\ \ ->\ 0,125\u00B0C<br>\n\ MCP9808.RES006255\ ->\ 0,0625\u00B0C<br>\n\ Gibt\ 1\ zur\u00FCck,\ wenn\ erfolgreich\ geschrieben\ werden\ konnte.\ Im\ Fehlerfall\n\ wird\ -1\ zur\u00FCckgegeben.\n\n\ @param\ res\ Wert\ zum\ Einstellen\ der\ Hysterese\n\ @return\ Schreibstatus\ 1/-1\n
comment18.params=
comment18.target=int\ setShutdownMode()
comment18.text=\n\ setShutdownMode\ setzt\ den\ MCP9808\ in\ den\ Shutdown\ Modus.\n\ Gibt\ 1\ zur\u00FCck,\ wenn\ erfolgreich\ geschrieben\ werden\ konnte.\ Im\ Fehlerfall\n\ wird\ -1\ zur\u00FCckgegeben.\n\n\ @return\ Schreibstatus\ 1/-1\n
comment19.params=
comment19.target=int\ setActiveMode()
comment19.text=\n\ setActiveMode\ setzt\ den\ MCP9808\ wird\ in\ den\ aktiven\ Modus.\n\ Gibt\ 1\ zur\u00FCck,\ wenn\ erfolgreich\ geschrieben\ werden\ konnte.\ Im\ Fehlerfall\n\ wird\ -1\ zur\u00FCckgegeben.\n\n\ @return\ Schreibstatus\ 1/-1\n
comment2.params=value
comment2.target=byte[]\ convertTempToReg(double)
comment2.text=\n\ Konvertiert\ einen\ double-Wert,\ der\ eine\ Temperaturangabe\ repr\u00E4sentiert,\ in\ ein\ \n\ 2\ Byte\ langes\ Array.\ Das\ Format\ entspricht\ dem\ im\ MCP9808\ ben\u00F6tigten\ Temperaturformat.<br>\n\ 16\ 15\ 14\ 13\ \ 12\ \ 11\ \ 10\ \ 09\ \ 08\ \ 07\ \ 06\ \ 05\ \ 04\ \ \ 03\ \ \ 02\ \ \ 01<br>\n\ -\ \ -\ \ -\ \ SGN\ 2^7\ 2^6\ 2^5\ 2^4\ 2^3\ 2^2\ 2^1\ 2^0\ 2^-1\ 2^-2\ 2^-3\ 2^-4<br>\n\ byte[0]......\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ byte[1].......<br>\n\n\ @param\ value\ Temperaturangabe\ als\ double-Wert\n\ @return\ Temperaturangabe\ im\ MCO9808-Format\n
comment20.params=
comment20.target=int\ reset()
comment20.text=\n\ reset\ setzt\ das\ Konfigurationsregister\ auf\ Defaulteinstellung.\n\ Gibt\ 1\ zur\u00FCck,\ wenn\ erfolgreich\ geschrieben\ werden\ konnte.\ Im\ Fehlerfall\n\ wird\ -1\ zur\u00FCckgegeben.\n\n\ @return\ Schreibstatus\ 1/-1\n
comment3.params=
comment3.target=double\ getAmbientTemp()
comment3.text=\n\ getAmbientTemp\ fragt\ die\ Umgebungstemperatur\ ab.\n\n\ @return\ Temperatur\ in\ \u00B0C\n
comment4.params=
comment4.target=boolean\ isAmbientGreaterEqualCrit()
comment4.text=\n\ isAmbientGreaterEqualCrit\ erfragt,\ ob\ die\ Umgebungstemperatur\ \n\ gr\u00F6\u00DFer/gleich\ der\ kritischen\ Temperatur\ ist.\n\ Gibt\ true\ zur\u00FCck\ wenn\ die\ Umgebungstemperatur\ \n\ gr\u00F6\u00DFer/gleich\ der\ kritischen\ Temperatur\ ist.\n\n\ @return\ boolean\n\ \n
comment5.params=
comment5.target=double\ getCritTemp()
comment5.text=\n\ getCritTemp\ erfragt\ den\ Vorgabewert\ der\ kritischen\ Temperatur\ ab.\n\n\ @return\ Temperatur\ in\ \u00B0C\n
comment6.params=dTemp
comment6.target=int\ setCritTemp(double)
comment6.text=\n\ setCritTemp\ setzt\ den\ Vorgabewert\ f\u00FCr\ die\ kritische\ Temperatur.\n\ Gibt\ 1\ zur\u00FCck,\ wenn\ erfolgreich\ geschrieben\ werden\ konnte.\ Im\ Fehlerfall\n\ wird\ -1\ zur\u00FCckgegeben.\n\n\ @param\ dTemp\ Temperatur\ in\ \u00B0C\n\ @return\ Schreibstatus\ 1/-1\n
comment7.params=
comment7.target=double\ getUpperTemp()
comment7.text=\n\ getUpperTemp\ erfragt\ den\ Vorgabewert\ der\ oberen\ Temperaturgrenze\ ab.\n\n\ @return\ Temperatur\ in\ \u00B0C\n
comment8.params=dTemp
comment8.target=int\ setUpperTemp(double)
comment8.text=\n\ setUpperTemp\ setzt\ den\ Vorgabewert\ f\u00FCr\ die\ obere\ Temperaturgrenze.\n\ Gibt\ 1\ zur\u00FCck,\ wenn\ erfolgreich\ geschrieben\ werden\ konnte.\ Im\ Fehlerfall\n\ wird\ -1\ zur\u00FCckgegeben.\n\n\ @param\ dTemp\ Temperatur\ in\ \u00B0C\n\ @return\ Schreibstatus\ 1/-1\n
comment9.params=
comment9.target=boolean\ isAmbientGreaterUpperBoundary()
comment9.text=\n\ isAmbientGreaterUpperBoundary\ erfragt,\ ob\ die\ Umgebungstemperatur\n\ gr\u00F6\u00DFer\ als\ die\ obere\ Temperaturgrenze\ ist.\n\n\ @return\ boolean\n
numComments=21
